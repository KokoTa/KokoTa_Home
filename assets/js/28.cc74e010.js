(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{302:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),a("h2",{attrs:{id:"缓存分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存分类"}},[t._v("#")]),t._v(" 缓存分类")]),t._v(" "),a("p",[t._v("首先要知道缓存按存储位置分为 "),a("strong",[t._v("四类")]),t._v("，按缓存时读取的先后顺序排序如下：")]),t._v(" "),a("ol",[a("li",[t._v("Service Worker")]),t._v(" "),a("li",[t._v("Memory Cache")]),t._v(" "),a("li",[t._v("Disk Cache")]),t._v(" "),a("li",[t._v("网络请求")])]),t._v(" "),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" Memory Cache")]),t._v(" "),a("p",[t._v("内存缓存，只在当前浏览器打开的情况下存在的缓存，即关闭浏览器后缓存将被清除。")]),t._v(" "),a("p",[t._v("几乎所有类型的资源都能进入内存缓存，但细分下来可以归为两类：")]),t._v(" "),a("ol",[a("li",[t._v("preloader。比如 css 中的 "),a("code",[t._v("@import")]),t._v(" 内容或者 "),a("code",[t._v("<video>")]),t._v(" 的 poster 等。")]),t._v(" "),a("li",[t._v("preload。显示指定的预加载资源，比如 "),a("code",[t._v('<link rel="preload/prefetch">')]),t._v(" 等。")])]),t._v(" "),a("p",[t._v("内存缓存保证了两个相同的请求下，只会被请求一次 (例如两个 "),a("code",[t._v("src")]),t._v(" 相同的图片)。")]),t._v(" "),a("p",[t._v("内存缓存会无视 "),a("code",[t._v("max-age=0、no-cache")]),t._v(" 等头部配置 (除了 "),a("code",[t._v("no-store")]),t._v(")，同时资源的匹配也并非仅仅是对 URL 做匹配，还可能会对 "),a("code",[t._v("Content-Type")]),t._v("，"),a("code",[t._v("CORS")]),t._v(" 等其他特征做校验，即便他们 "),a("code",[t._v("src")]),t._v(" 相等 (比如相同的请求地址，但返回的类型不同，则不会读取内存缓存)。")]),t._v(" "),a("p",[t._v("如果真心不想让一个资源进入缓存，就连短期的内存缓存也不行，那就需要在头部配置中添加 "),a("code",[t._v("no-store")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" Disk Cache")]),t._v(" "),a("p",[t._v("硬盘缓存，即持久缓存，它允许相同的资源在跨会话，甚至跨站点的情况下使用，例如两个站点都使用了同一张图片。")]),t._v(" "),a("p",[t._v("硬盘缓存严格按照 HTTP 头信息来管理资源。")]),t._v(" "),a("p",[t._v("不同浏览器对硬盘缓存的清理算法是不同的。")]),t._v(" "),a("h4",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),a("p",[t._v("硬盘缓存分为强制缓存和对比缓存。")]),t._v(" "),a("p",[t._v("强制缓存就是直接从硬盘里读数据，不发送请求。它直接减少了请求数，是提升最大的缓存策略。")]),t._v(" "),a("p",[t._v("可以造成强制缓存的字段是 "),a("code",[t._v("Cache-control")]),t._v(" 和 "),a("code",[t._v("Expires")]),t._v("。")]),t._v(" "),a("h5",{attrs:{id:"expires-http-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires-http-1-0"}},[t._v("#")]),t._v(" Expires（HTTP 1.0）")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Expires")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Thu, 10 Nov 2017 08:45:11 GMT")])]),t._v("\n")])])]),a("p",[t._v("在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。")]),t._v(" "),a("p",[t._v("但是，这个字段设置时有两个缺点：")]),t._v(" "),a("ol",[a("li",[t._v("由于是绝对时间，用户可能会将客户端(电脑)本地的时间进行修改，导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自行修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。")]),t._v(" "),a("li",[t._v("写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致非法属性从而设置失效。")])]),t._v(" "),a("h5",{attrs:{id:"cache-control-http-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-http-1-1"}},[t._v("#")]),t._v(" Cache-control（HTTP/1.1）")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Cache-control")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("max-age=2592000")])]),t._v("\n")])])]),a("p",[t._v("这两者的区别就是前者是绝对时间，而后者是相对时间。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cache-control 的字段详情"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("其中这里有一个疑问："),a("code",[t._v("max-age=0")]),t._v(" 和 "),a("code",[t._v("no-cache")]),t._v(" 等价吗？从规范的字面意思来说，max-age 到期是 应该(SHOULD) 重新验证，而 no-cache 是 必须(MUST) 重新验证。但实际情况以浏览器实现为准，大部分情况他们俩的行为还是一致的。（如果是 max-age=0, must-revalidate 就和 no-cache 等价了）")]),t._v(" "),a("p",[t._v("PS1："),a("code",[t._v("must-revalidate")]),t._v(" 加和不加的效果其实是一样的，就算不加浏览器也会自动帮你加。")]),t._v(" "),a("p",[t._v("PS2："),a("code",[t._v("no-cache")]),t._v(" 虽然字面意义是 “不要缓存”。但它实际上的机制是，仍然对资源使用缓存，但每一次在使用缓存之前必须（MUST）向服务器对缓存资源进行验证，如果验证通过就读取缓存，验证不通过就把旧缓存删了重新获取资源。")]),t._v(" "),a("p",[t._v("PS3：Chrome 默认的缓存时间为 "),a("code",[t._v("DEFAULT_CACHE_TIME = 300")]),t._v("，即 5 分钟，这意味着所有资源除非特殊指定，都会进行缓存。对于其他浏览器，可能会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间")]),t._v(" "),a("p",[t._v("PS4："),a("code",[t._v("max-age")]),t._v(" 是在浏览器清除缓存时起作用的字段，表示一定时间内不用请求，直接读取缓存。但如果我们手动清除浏览器缓存后，max-age 也就没什么用了，还是得发送请求获取数据。"),a("code",[t._v("max-age")]),t._v(" 和 "),a("code",[t._v("no-cache")]),t._v(" 不能同时存在，通过 PS3 大概可以知道 no-cache 的缓存大概是 5 分钟。")]),t._v(" "),a("p",[t._v("关于如何使用字段的图例见下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5.jpg",alt:"缓存策略"}})]),t._v(" "),a("p",[t._v("顺带一提，在 HTTP/1.1 之前，如果想使用 no-cache，通常是使用 Pragma 字段，如 Pragma: no-cache (这也是 Pragma 字段唯一的取值)。但是这个字段只是浏览器约定俗成的实现，并没有确切规范，因此缺乏可靠性。它应该只作为一个兼容字段出现，在当前的网络环境下其实用处已经很小。")]),t._v(" "),a("p",[t._v("Cache-control 的优先级高于 Expires，为了兼容性考虑，实际项目中两个字段都会设置。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("public")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("表示响应可以被客户端&&服务器端缓存")])]),t._v(" "),a("tr",[a("td",[t._v("private")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("只能被客户端缓存")])]),t._v(" "),a("tr",[a("td",[t._v("max-age=30")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("缓存30s后过期，需要重新请求")])]),t._v(" "),a("tr",[a("td",[t._v("s-maxage=30")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("盖max-age，作用同上，只在【代理服务器】生效")])]),t._v(" "),a("tr",[a("td",[t._v("no-store")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不存")])]),t._v(" "),a("tr",[a("td",[t._v("no-cache")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("缓存并立即失效，下次验证是否过期")])]),t._v(" "),a("tr",[a("td",[t._v("max-stale=30")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("30s内即使失效也用")])]),t._v(" "),a("tr",[a("td",[t._v("min-fresh")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("希望在30s内获取最新的响应")])])])]),t._v(" "),a("h4",{attrs:{id:"对比缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比缓存"}},[t._v("#")]),t._v(" 对比缓存")]),t._v(" "),a("p",[t._v("当强制缓存失效(超过规定时间)时，就需要使用对比缓存，由服务器决定缓存内容是否失效。")]),t._v(" "),a("p",[t._v("对比缓存也是要发送请求的，它主要的优点是可以节省返回的响应体 (比如想要浏览器读取缓存，直接返回 304 状态码就可以了)。")]),t._v(" "),a("p",[t._v("对比缓存有两组字段："),a("code",[t._v("Last-Modified & If-Modified-Since")]),t._v(" 和 "),a("code",[t._v("Etag & If-None-Match")])]),t._v(" "),a("h5",{attrs:{id:"last-modified-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified & If-Modified-Since")]),t._v(" "),a("p",[t._v("流程：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("服务器通过 Last-Modified 字段告知客户端，资源最后一次被修改的时间，例如：")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header"}},[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Last-Modified")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Mon, 10 Nov 2018 09:10:11 GMT")])]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("浏览器将这个值和内容一起记录在缓存中。")])]),t._v(" "),a("li",[a("p",[t._v("下一次请求相同资源时时，浏览器从自己的缓存中找出 “不确定是否过期” 的缓存，将其 Last-Modified 的值写入到请求头的 If-Modified-Since 字段")])]),t._v(" "),a("li",[a("p",[t._v("服务器会将发送过来的 If-Modified-Since 的值与自身的 Last-Modified 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。")])])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ol",[a("li",[t._v("如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。")]),t._v(" "),a("li",[t._v("如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，但还是会导致返回 200 状态码和数据，所以起不到缓存的作用。")])]),t._v(" "),a("h5",{attrs:{id:"etag-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[t._v("#")]),t._v(" Etag & If-None-Match")]),t._v(" "),a("p",[t._v("Etag 的出现解决了上面的缺点。")]),t._v(" "),a("p",[t._v("Etag 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 Etag 字段。")]),t._v(" "),a("p",[t._v("可以把 Etag 当作文件的 id，每次文件产生变化都会改变这个 id，服务器通过对比这个字段来决定返回的结果，流程和上面一致。")]),t._v(" "),a("h2",{attrs:{id:"service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" Service Worker")]),t._v(" "),a("p",[t._v("上述的缓存类型都是由浏览器内部来控制的，我们只能设置响应头的某些字段来告诉浏览器，而不能自己操作。而 Service Worker 则可以通过编程的方式来缓存数据。")]),t._v(" "),a("p",[t._v("Service Worker 将请求返回的数据存储在 Service Worker 数据库中。")]),t._v(" "),a("p",[t._v("Service Worker 的缓存是永久的，有两种情况会导致这个缓存中的资源被清除：手动调用 API cache.delete(resource) 或者容量超过限制，被浏览器全部清空。")]),t._v(" "),a("p",[t._v("如果 Service Worker 找不到缓存资源，那么它会使用 fetch() 方法，进一步去 Memory Cache 和 Disk Cache 里找，如果再找不到，就通过网络请求获取资源，再将资源存入 Service Worker 数据库中。")]),t._v(" "),a("h2",{attrs:{id:"网络请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),a("p",[t._v("通过网络请求的资源根据情况进行不同类型的缓存（一份文件可能会被多种类型缓存）：")]),t._v(" "),a("ol",[a("li",[t._v("根据 Service Worker 中的 handler 决定是否存入 Service Worker 数据库中。")]),t._v(" "),a("li",[t._v("根据 HTTP 头部的相关字段(Cache-control, Pragma 等)决定是否存入 Disk Cache。")]),t._v(" "),a("li",[t._v("Memory Cache 保存一份资源 的引用，以备下次使用。")])]),t._v(" "),a("h2",{attrs:{id:"浏览器行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器行为"}},[t._v("#")]),t._v(" 浏览器行为")]),t._v(" "),a("p",[t._v("通过不同的浏览器行为，会触发不同类型缓存的读取：")]),t._v(" "),a("ol",[a("li",[t._v("打开网页，地址栏输入地址： 查找 Disk Cache 中是否有匹配。如有则使用；如没有则发送网络请求。")]),t._v(" "),a("li",[t._v("普通刷新 (F5)：因为 TAB 并没有关闭，因此 Memory Cache 是可用的，会被优先使用(如果匹配的话)。其次才是 Disk Cache。")]),t._v(" "),a("li",[t._v("强制刷新 (Ctrl + F5)：浏览器不使用缓存，发送的请求头部均带有 Cache-control: no-cache (为了兼容，还带了 Pragma: no-cache)。服务器直接返回 200 和最新内容。")])]),t._v(" "),a("h2",{attrs:{id:"案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),a("h3",{attrs:{id:"memory-cache-disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache-disk-cache"}},[t._v("#")]),t._v(" Memory Cache & Disk Cache")]),t._v(" "),a("p",[t._v("一个简单页面 index.html，引用了一个 index.css 和 index.js。")]),t._v(" "),a("p",[t._v("三种资源都设置了 "),a("code",[t._v("Cache-control: max-age=86400")]),t._v(" 强制缓存 24 小时。")]),t._v(" "),a("p",[t._v("第一次加载：三个资源都进行了网络请求。")]),t._v(" "),a("p",[t._v("刷新页面：三个资源都从 Memory Cache 中获取。")]),t._v(" "),a("p",[t._v("关闭再打开页面：三个资源都从 Disk Cache 中获取。")]),t._v(" "),a("h3",{attrs:{id:"no-cache-no-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-cache-no-store"}},[t._v("#")]),t._v(" no-cache & no-store")]),t._v(" "),a("p",[t._v("一个简单页面 index.html，引入资源，代码如下：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 把3种资源都改成请求两次 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/index.css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/index.css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/index.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/index.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}}),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/mashroom.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/static/mashroom.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 异步请求图片 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" img "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/mashroom.jpg'")]),t._v("\n        document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("情况一：当服务器响应设置为 "),a("code",[t._v("Cache-Control: no-cache")]),t._v(" 时：")]),t._v(" "),a("p",[t._v("结果是相同的资源不会重复加载，而是从 Memory Cache 中取缓存，最终请求数为 3。")]),t._v(" "),a("p",[t._v("情况二：当服务器响应设置为 "),a("code",[t._v("Cache-Control: no-store")]),t._v(" 时：")]),t._v(" "),a("p",[t._v("结果是三种资源都被请求了 2 次，而且图片还多了一次动态请求。")]),t._v(" "),a("h3",{attrs:{id:"service-worker-memory-disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker-memory-disk-cache"}},[t._v("#")]),t._v(" Service Worker & Memory(Disk) Cache")]),t._v(" "),a("p",[t._v("写一个 serviceWorker.js，指定要缓存的 3 个文件：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// serviceWorker.js")]),t._v("\nself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'install'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当确定要访问某些资源时，提前请求并添加到缓存中。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个模式叫做“预缓存”")]),t._v("\n  e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitUntil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'service-worker-test-precache'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/index.css'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/static/mashroom.jpg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存中能找到就返回，找不到就网络请求，之后再写入缓存并返回。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个称为 CacheFirst 的缓存策略。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("respondWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'service-worker-test-precache'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("matchedResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" matchedResponse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fetchedResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fetchedResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fetchedResponse\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个也叫做 NetworkOnly 的缓存策略，即不从数据库里找，直接去 Memory/Disk Cache 里找。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Network 里显示的还是 from ServiceWorker")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// self.addEventListener('fetch', e => {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    return e.respondWith(fetch(e.request))")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// })")]),t._v("\n")])])]),a("p",[t._v("第一次加载：除了 3 次网络请求，还多了 3 次预缓存操作，共计 6 次。")]),t._v(" "),a("p",[t._v("刷新或者关闭再打开：三个资源都是从 Service Worker 中获取。")]),t._v(" "),a("h2",{attrs:{id:"缓存的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的应用"}},[t._v("#")]),t._v(" 缓存的应用")]),t._v(" "),a("h3",{attrs:{id:"不常变化的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不常变化的资源"}},[t._v("#")]),t._v(" 不常变化的资源")]),t._v(" "),a("p",[t._v("设置一个长时间的强制缓存，比如 "),a("code",[t._v("Cache-Control: max-age=31536000")]),t._v("。")]),t._v(" "),a("p",[t._v("如果需要更新资源，就需要在文件名(或者路径)中添加 hash，版本号等动态字符，之后更改动态字符，达到更改引用 URL 的目的，从而让之前的强制缓存失效。")]),t._v(" "),a("h3",{attrs:{id:"经常变化的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经常变化的资源"}},[t._v("#")]),t._v(" 经常变化的资源")]),t._v(" "),a("p",[t._v("这类资源的特点是：URL 不能变化，但内容可以(且经常)变化。我们可以设置 "),a("code",[t._v("Cache-Control: no-cache")]),t._v(" 来迫使浏览器每次请求都必须找服务器验证资源是否有效。")]),t._v(" "),a("p",[t._v("既然提到了验证，就必须 ETag 或者 Last-Modified 出场。这些字段都会由专门处理静态资源的常用类库(例如 koa-static)自动添加，无需开发者过多关心。")]),t._v(" "),a("h3",{attrs:{id:"禁止缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁止缓存"}},[t._v("#")]),t._v(" 禁止缓存")]),t._v(" "),a("p",[a("code",[t._v("Cache-Control: no-cache, no-store, must-revalidate")])]),t._v(" "),a("h3",{attrs:{id:"静态资源缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源缓存"}},[t._v("#")]),t._v(" 静态资源缓存")]),t._v(" "),a("p",[a("code",[t._v("Cache-Control: public, max-age=31536000")])]),t._v(" "),a("h3",{attrs:{id:"特殊情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况"}},[t._v("#")]),t._v(" 特殊情况")]),t._v(" "),a("p",[a("code",[t._v("Cache-Control: max-age=600, must-revalidate")])]),t._v(" "),a("p",[t._v("这是一种非常危险的设置，比如一个页面引入了 index1.js 和 index2.js，这两个文件相互依赖且都设置了上面的头信息。")]),t._v(" "),a("p",[t._v("如果在 600 秒内，浏览器把 index1.js 缓存删除了，那么下次打开页面将加载新的 index1.js，此时如果这个新 js 发生了重大改动，则将导致和 index2.js 发生冲突，导致错误。")]),t._v(" "),a("p",[t._v("这种短的 max-age 通常用在不需要其他依赖的文件中，比如图片、打包后的 js。")]),t._v(" "),a("h3",{attrs:{id:"生产环境设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产环境设置"}},[t._v("#")]),t._v(" 生产环境设置")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/278986273",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);