(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{284:function(t,s,e){"use strict";e.r(s);var n=e(14),a=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"cookie与session与token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie与session与token"}},[t._v("#")]),t._v(" Cookie与Session与Token")]),t._v(" "),s("p",[t._v("我：MMP，又要输入密码了！\n他：你的令牌过期了？\n我：什么令牌？\n他：token啊~\n我：令牌不是session吗？\n他：那是会话啊~\n我：会话不是cookie吗？\n他：那是一个存放对象啊~\n我：噢~~\n他：懂了？\n我：那是啥？\n他：MMP。。。")]),t._v(" "),s("h2",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" Cookie")]),t._v(" "),s("p",[t._v("我们先来说说cookie："),s("br"),t._v("\n它是用来存放client信息的对象，每次请求时都会发送给server。"),s("br"),t._v("\ncookie是不可跨域的，如果不想让js操作某cookie键值，可以设置httpOnly属性使之只能在server操作。"),s("br"),t._v("\n机智的人民群众当年把用户名和密码简单加密后存放在cookie上，最后被黑客们捅爆了菊花。"),s("br"),t._v("\n因为敏感信息完全暴露，所以这是一个不靠谱的方法。")]),t._v(" "),s("h2",{attrs:{id:"session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[t._v("#")]),t._v(" Session")]),t._v(" "),s("p",[t._v("后来我们机制的人民群众又想出了一个方法，利用session！")]),t._v(" "),s("p",[s("strong",[t._v("流程解析：")])]),t._v(" "),s("ul",[s("li",[t._v("client第一次请求 -> 注册/登录 -> server生成session -> session中存放信息 -> cookie中设置一个sessionID(对应创建的session)来作为身份标识 -> 返回响应给client")]),t._v(" "),s("li",[t._v("client第二次请求 -> server从cookie中取出sessionID -> 根据id在数据库中查找对应session  -> 从session中提取信息并进行操作 -> 返回响应给client")]),t._v(" "),s("li",[t._v("client第三次请求 -> sessionID过期 -> 重新登录 -> server生成新session -> ...同第一次请求")])]),t._v(" "),s("p",[t._v("以上方法又称为cookie-session方法，cookie中不存放敏感数据，就放一个id就可以了，而server用来存放敏感数据并根据id进行数据查找。"),s("br"),t._v("\n感觉是不是很棒棒？"),s("br"),t._v("\n是不是很简单？"),s("br"),t._v("\n是不是很easy？"),s("br"),t._v("\n然而这个方法有两个问题：")]),t._v(" "),s("ol",[s("li",[t._v("要占用大量的服务器空间，因为session中存放着大量数据（session可以存放在文件/内存/数据库中）")]),t._v(" "),s("li",[t._v("单点登录问题，即一次注册，一次登录与退出，状态可以在子域名间共享。简单来说如果我们登录了豆瓣，那么就等于登录了豆瓣FM、豆瓣电影，状态是共享的。假设以session方式来存储用户id，一开始用户的session只会存储在一台服务器上。对于有多个子域名的站点，每个子域名至少会对应一台不同的服务器。如果要在其他的子域名下依然可以取到Session，这要求我们在多台服务器上同步Session。")])]),t._v(" "),s("h2",{attrs:{id:"token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" Token")]),t._v(" "),s("p",[t._v("那有木有更好的方法啊，我亲爱的汤姆？"),s("br"),t._v("\n当然啦！杰瑞！我们可以利用token啊！"),s("br"),t._v("\ntoken是啥？"),s("br"),t._v("\ntoken又称令牌，目前主流的token实现遵循jwt(JSON Web Token)规范，即由"),s("strong",[t._v("三个部分组成")]),t._v("：头部、载荷、签名。"),s("br"),t._v("\njwt适合用于向Web应用传递一些非敏感信息。")]),t._v(" "),s("h3",{attrs:{id:"头部-head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部-head"}},[t._v("#")]),t._v(" 头部(head)")]),t._v(" "),s("p",[t._v("描述jwt基本信息的对象：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  'typ'"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 'JWT'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// token规范类型")]),t._v("\n  'alg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 'HS256'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所用加密算法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"载荷-payload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#载荷-payload"}},[t._v("#")]),t._v(" 载荷(payLoad)")]),t._v(" "),s("p",[t._v("描述token信息的对象，包含关于用户的非敏感信息(用户名/权限):")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iss"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"KokoTa"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 签发者")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iat"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1441593502")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 签发时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exp"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1441594722")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过期时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"aud"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.example.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收方")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sub"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jrocket@example.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户方")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"user_name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Karo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户名")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"admin"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户权限")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"签名-sign"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#签名-sign"}},[t._v("#")]),t._v(" 签名(sign)")]),t._v(" "),s("p",[t._v("jwt规范规定用 "),s("strong",[t._v("base64编码后的头部.载荷")]),t._v(" + "),s("strong",[t._v("secret字符串")]),t._v(" + "),s("strong",[t._v("HS256算法加密")]),t._v(" 后的值 作为签名。"),s("br"),t._v("\n如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的签名和之前的签名就将是不一样的。")]),t._v(" "),s("h3",{attrs:{id:"最终的token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终的token"}},[t._v("#")]),t._v(" 最终的token")]),t._v(" "),s("p",[t._v("token = 头部.载荷.签名，例子如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM\n")])])]),s("h3",{attrs:{id:"token流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token流程"}},[t._v("#")]),t._v(" token流程")]),t._v(" "),s("p",[s("strong",[t._v("流程解析：")])]),t._v(" "),s("ul",[s("li",[t._v("client第一次请求 -> 注册/登录 -> server生成token -> 放在cookie中返回给client")]),t._v(" "),s("li",[t._v("client第二次请求 -> server从cookie中获得token -> server对比sign是否正确，token是否过期，接收方是否正确等来判断有效性 -> 有效则继续操作")]),t._v(" "),s("li",[t._v("client第三次请求 -> 请求了子域名 -> 由于cookie设置了domian -> 可以取到token -> 验证token -> 有效则继续操作")]),t._v(" "),s("li",[t._v("client第四次请求 -> token过期 -> 重新登录 -> server生成token -> ...同第一次请求")])]),t._v(" "),s("p",[s("strong",[t._v("标注：")])]),t._v(" "),s("ol",[s("li",[t._v("token的广泛用处之一是"),s("strong",[t._v("API权限控制")]),t._v("。")]),t._v(" "),s("li",[t._v("客户端可以将token存储在cookie/内存/loacalStorage中。")]),t._v(" "),s("li",[t._v("通过给cookie的token键值对设置"),s("code",[t._v("domain=.taobao.com")]),t._v("，这样所有子域名都能接收到这个token，如果再设置一下httpOnly，那么这个token就不能被前端操作，防止了XSS攻击，但将token存放在cookie的方法无法阻止CSRF攻击，不过这个方法对于展示型网站也就足够了，比如扇贝、B站等(它们的支付都是扫码，CSRF没啥卵用)。")]),t._v(" "),s("li",[t._v("除了上面利用cookie传递token的方法，还可以将token加在请求/响应的header中传递。前者会发生CSRF问题，因为点击诱导连接后，cookie被自动发送，而cookie中含有token，server直接验证通过后就发生操作了；但后者不会，因为诱导连接不能操作cookie，cookie只能在本域下操作，我们让本域操作cookie并提取token(或者token存储在localStorage中，让本域取出)，再将其添加到请求头中发送，server验证请求头的token而不是验证cookie中的token，这样就避免了token被自动传递识别的问题，然而这又会发生XSS问题(高级浏览器会自己禁用XSS攻击，另外如果使用框架的话也无需担心XSS攻击)。")]),t._v(" "),s("li",[t._v("由上一点可知，普通的查询、展示、浏览，可以直接用token进行身份验证，而当进行提交表单或其他重要操作时，不能因为client保存了用户状态就认为是用户本人操作。这些重要请求需要在本域中进行加工后(比如请求中加上服务端渲染页面时给的随机字符串，或者请求中加上按照某种约定生成的字符串)再发送给server，而server也要对这些信息进行相应的验证。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/q/1010000008366262",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于如何实现异地登陆后，本地被踢出并提示重新登录的方法"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"token总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token总结"}},[t._v("#")]),t._v(" token总结")]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ol",[s("li",[t._v("解决了session占用内存大的问题。因为只保存密码等敏感信息，其余的非敏感信息都存储在token中。")]),t._v(" "),s("li",[t._v("解决了单点登录的问题。见token流程解析3，注意把token存储在localStorage是不能解决单点问题的，因为localStorage不可跨域。其他解决单点登录的方法见"),s("a",{attrs:{href:"https://cnodejs.org/topic/55f6e69904556da7553d20dd",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("可以预防CSRF攻击")]),t._v(" "),s("li",[t._v("结构简单(JSON)，便于传输")]),t._v(" "),s("li",[t._v("跨语言支持(JAVA、PHP等)")])]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("ol",[s("li",[t._v("缺点就是使server有计算压力（例如加密、编码和解码）。")]),t._v(" "),s("li",[t._v("session 有的问题 token 也有，比如泄露问题(使用 HTTPS 解决)、重放攻击问题("),s("a",{attrs:{href:"https://blog.csdn.net/koastal/article/details/53456696",target:"_blank",rel:"noopener noreferrer"}},[t._v("解决方案"),s("OutboundLink")],1),t._v(")、续签和注销问题")])]),t._v(" "),s("h3",{attrs:{id:"状态、有状态、无状态是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态、有状态、无状态是什么"}},[t._v("#")]),t._v(" 状态、有状态、无状态是什么")]),t._v(" "),s("ul",[s("li",[t._v("状态：请求的状态是 client 与 server 交互过程中，保存下来的相关信息，client的保存在 page/request/session/application 或者全局作用域中，而 server 的一般存在 session 中。")]),t._v(" "),s("li",[t._v("有状态 API：server 保存了 client 的请求状态， server 会通过 client 传递的 sessionID 在其 session 作用域内找到之前交互的信息并应答。(cookie-session方法)")]),t._v(" "),s("li",[t._v("无状态 API：无状态是 RESTful 架构设计的一个非常主要的原则。无状态 API 的每一个请求都是独立的，它要求由client保存所有需要的认证信息，每次发请求都要带上自己的状态。(token方法)")])]),t._v(" "),s("h2",{attrs:{id:"我们需要更安全的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们需要更安全的方式"}},[t._v("#")]),t._v(" 我们需要更安全的方式")]),t._v(" "),s("p",[t._v("归根结底，表面上保证了用户登录状态的安全，但重点是如果client被攻破，被黑客截取到了cookie/session/token，那岂不是可以拿着这个值冒充用户了吗？就算给它们设置过期值，但只要在过期范围内，还是能逍遥法外。"),s("br"),t._v("\n因此任何自己想的安全措施都是错误的、或者不完备的，要防范中间人攻击的唯一正确方法就是使用"),s("strong",[t._v("HTTPS")]),t._v("。以前也流行过SecretKey Hash签名等等，新版本的API大部分都已经放弃掉这些方法了，比如说OAuth的新版本就是只支持HTTPS。HTTP上的方法或多或少是有漏洞的，比如说HMAC校验是不能防范重放攻击的，也没有办法防止中间人从API里窃取敏感信息，更何况如果登录的时候就被监听了那不是完蛋了。")]),t._v(" "),s("h2",{attrs:{id:"资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/KokoTa/Http-status/blob/master/app.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序实例：app.js"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jwt官网"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);