(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{296:function(t,a,r){"use strict";r.r(a);var e=r(14),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"盒模型与bfc与布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盒模型与bfc与布局"}},[t._v("#")]),t._v(" 盒模型与BFC与布局")]),t._v(" "),a("p",[t._v("他：盒模型是什么？\n我：就是一个盒子啊！\n他：能具体说说看吗？\n我：不能。\n他：吔屎啦你！")]),t._v(" "),a("h2",{attrs:{id:"盒模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盒模型"}},[t._v("#")]),t._v(" 盒模型")]),t._v(" "),a("h3",{attrs:{id:"盒模型概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盒模型概念"}},[t._v("#")]),t._v(" 盒模型概念")]),t._v(" "),a("ol",[a("li",[t._v("盒模型包含：margin, border, padding, content 这四部分。")]),t._v(" "),a("li",[t._v("盒模型分为两种：标准盒模型和IE盒模型。")]),t._v(" "),a("li",[t._v("标准盒模型的模型高度 = content的高度\nIE盒模型的模型高度 = content + padding + border 的高度(宽度同理)\n"),a("img",{attrs:{src:"/images/standard-box.jpg",alt:"Standard-box"}}),t._v(" "),a("img",{attrs:{src:"/images/ie-box.jpg",alt:"IE-box"}})]),t._v(" "),a("li",[t._v("CSS3的"),a("code",[t._v("box-sizing")]),t._v("提供了两种盒模型的转换：\n"),a("code",[t._v("box-sizing: border-box")]),t._v("：标准转IE\n"),a("code",[t._v("box-sizing: content-box")]),t._v("：IE转标准")]),t._v(" "),a("li",[t._v("JS如何获取盒模型的宽高：\n"),a("ol",[a("li",[t._v("dom.style.width/height：只能获取内联的 content 的宽高")]),t._v(" "),a("li",[t._v("dom.currentStyle.width/height：获取最终渲染的 content 的宽高(只有IE支持)")]),t._v(" "),a("li",[t._v("window.getComputedStyle(dom).width/height：同2(Firefox和Chrome支持)")]),t._v(" "),a("li",[t._v("dom.getBoundingClientRect().width/height：获取最终渲染的盒子的宽高和位置")])])])]),t._v(" "),a("h3",{attrs:{id:"盒模型问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盒模型问题"}},[t._v("#")]),t._v(" 盒模型问题")]),t._v(" "),a("p",[t._v("盒模型垂直方向会发生外边距重叠。\n"),a("img",{attrs:{src:"/images/%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A0.png",alt:"边距重叠"}}),t._v("\n上图显示了我们给红块添加了一个上外边距"),a("code",[t._v("margin-top: 100px")]),t._v("，那么此时body的位置是否发生了变化？\n"),a("img",{attrs:{src:"/images/%E8%BE%B9%E8%B7%9D%E9%87%8D%E5%8F%A02.png",alt:"边距重叠"}}),t._v("\n答案是body也会有一个上外边距"),a("code",[t._v("margin-top: 100px")]),t._v("的效果。\n那么为什么会发生重叠呢？\n这个就要扯到BFC了。\n但在此之前还需要声明的是，外边距重叠分为三种类型：\n父子元素重叠，兄弟元素重叠，空元素重叠\n它们都是取的外边距最大值")]),t._v(" "),a("h2",{attrs:{id:"bfc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc"}},[t._v("#")]),t._v(" BFC")]),t._v(" "),a("h3",{attrs:{id:"bfc概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc概念"}},[t._v("#")]),t._v(" BFC概念")]),t._v(" "),a("p",[t._v("块格式化上下文（block formatting context）是一个独立的渲染区域，容器里面的子元素不会在布局上影响到外面的元素。只有Block-level box参与， 它规定了内部的Block-level Box如何布局。块格式化上下文包括了创建该上下文的元素的所有子元素，但不包括创建了新的块格式化上下文的子元素。\n其实上面废话这么多总结一句就是：BFC会创建一个独立的盒子，这个盒子，包括里面的东西都是与外界隔绝的。")]),t._v(" "),a("h3",{attrs:{id:"如何生成bfc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何生成bfc"}},[t._v("#")]),t._v(" 如何生成BFC")]),t._v(" "),a("ol",[a("li",[t._v("根元素，即HTML元素")]),t._v(" "),a("li",[t._v("float的值不为none")]),t._v(" "),a("li",[t._v("overflow的值不为visible")]),t._v(" "),a("li",[t._v("display的值为inline-block、table-cell、table-caption等")]),t._v(" "),a("li",[t._v("position的值为absolute或fixed")])]),t._v(" "),a("h3",{attrs:{id:"bfc布局规则-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc布局规则-原理"}},[t._v("#")]),t._v(" BFC布局规则/原理")]),t._v(" "),a("ol",[a("li",[t._v("内部的Box会在垂直方向，一个接一个地放置。\n解释：内部的Box就像文档流从上到下一样，按顺序排列")]),t._v(" "),a("li",[t._v("属于同一个BFC的两个相邻Box的margin会发生重叠。")]),t._v(" "),a("li",[t._v("父元素左边的border，与子元素左边的margin相接触(对于从左往右的格式化)。即使存在浮动也是如此。")]),t._v(" "),a("li",[t._v("BFC的区域不会与Float Box重叠。\n"),a("img",{attrs:{src:"/images/BFC%E4%B8%8EFloat.png",alt:"BFC与Float"}}),t._v("\n如上图所示，两个同级元素，左边是浮动块，右边是BFC块，两者不会发生重叠。")]),t._v(" "),a("li",[t._v("计算BFC的高度时，浮动元素也参与计算。\n解释：如图一开始我们设置了一个黑色背景的父元素和一个红色背景的子元素\n"),a("img",{attrs:{src:"/images/BFC%E9%AB%98%E5%BA%A61.png",alt:"BFC高度1"}}),t._v("\n接下来我们使红色元素左浮动，我们发现父元素的高度变为了0\n"),a("img",{attrs:{src:"/images/BFC%E9%AB%98%E5%BA%A62.png",alt:"BFC高度2"}}),t._v("\n此时如果我们给父元素添加BFC，浮动元素也参与父元素的高度计算\n"),a("img",{attrs:{src:"/images/BFC%E9%AB%98%E5%BA%A61.png",alt:"BFC高度1"}}),t._v("\nLook!终于正常了！")])]),t._v(" "),a("h3",{attrs:{id:"bfc应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfc应用"}},[t._v("#")]),t._v(" BFC应用")]),t._v(" "),a("ol",[a("li",[t._v("自适应两栏布局\n解释：见原理第4点")]),t._v(" "),a("li",[t._v("可以阻止元素被浮动元素覆盖和清除内部浮动\n解释：见原理第5点")]),t._v(" "),a("li",[t._v("分属于不同的BFC时可以阻止margin重叠")])]),t._v(" "),a("h2",{attrs:{id:"布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/KokoTa/All-demo/blob/master/demo/Layout/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("三栏布局的五种写法"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=i.exports}}]);