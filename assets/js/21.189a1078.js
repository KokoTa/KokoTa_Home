(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{295:function(s,t,e){"use strict";e.r(t);var a=e(14),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"服务端踩坑日记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端踩坑日记"}},[s._v("#")]),s._v(" 服务端踩坑日记")]),s._v(" "),t("p",[s._v("前端写了这么久，却还只是停在本地服务器开发，云服务器什么的我才不懂嘞~"),t("br"),s._v("\n噢，我知道这样子是不对的，正好赶上腾讯云打折，就买了台服务器自己玩一下吧。"),t("br"),s._v("\n然而买完之后有点后悔了，阿里云居然也打折了，同样的配置，更低的价格。。。我想这一定是服务器商的阴谋！"),t("br"),s._v("\n接着我的表情逐渐扭曲。。。"),t("br"),s._v("\nA few moments later。。。"),t("br"),s._v("\n接着我的表情逐渐稳定。。。"),t("br"),s._v("\n转移注意力思考了一下人生。。。\n想想看啊，实习也快结束了，回顾了一下自己写的东西。。。\nFUCK！看来以后要叫我“Bug Boy”了，哈哈哈哈！我Bug多！我开心！我自豪！我。。。(忧郁脸)"),t("br"),s._v("\n好吧，现实把我拉了回来，且不论自己懒癌有没有得治，放着买好的服务器不用，这不是暴殄天物吗？"),t("br"),s._v("\n我拍着自己的肚皮，怀着刚刚给自己加冕为王时的尴尬心情，深思熟虑了5秒钟。。。\n我决定试试把一张页面放到服务器上，嘻嘻！")]),s._v(" "),t("h2",{attrs:{id:"购买服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#购买服务器"}},[s._v("#")]),s._v(" 购买服务器")]),s._v(" "),t("p",[s._v("这个就不用过多阐述了，阿里云、腾讯云、百度云等服务器提供商都可以购买云服务器。一般来说1核1G的服务器可以同时应付几百人同时在线，对于我来说，这已经足够了。购买服务器时，个人推荐ubuntu的系统，对新手(我)比较友好。购买后，我们会收到购买成功的邮件，邮件里是服务器的信息，包括服务器的公网IP和密码。接着我们打开云服务器控制台："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%8E%A7%E5%88%B6%E5%8F%B0.png",alt:"云主机控制台"}}),t("br"),s._v("\n我们可以看到右侧有个登录按钮，点击进入后输入ubuntu(默认用户名)和密码(邮件里的)，我们就可以登录系统控制台了。")]),s._v(" "),t("h2",{attrs:{id:"远程登录和免密登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程登录和免密登录"}},[s._v("#")]),s._v(" 远程登录和免密登录")]),s._v(" "),t("p",[s._v("虽然我们可以以网页线上的方式登录控制台，但是需要先进入官网啊，再进入控制台啊，再选择服务器登录啊等等，很麻烦。所以我们一般都是本地登录，这里需要用到Linux命令行工具。如果是Mac用户，可以用自带的shell来执行命令，这里由于本人是吃土少年，只有Windows，所以想要执行Linux命令，就需要额外的辅助工具(比如Putty、bash)。谢天谢地，幸好我有使用git，自带了bash命令行工具，懒癌+1。")]),s._v(" "),t("p",[s._v("打开命令行工具后，我们输入 "),t("code",[s._v("ssh ubuntu@公网IP")]),s._v(" 后，再输入密码，就可以登录服务器系统控制台了。(PS：输入密码时没有光标，也不会显示输入的字符，但确实是输入进去了，Linux大佬会心一笑)"),t("br"),s._v("\n好的，现在我们可以愉快的进行操作了，但每次登录都要输密码，确实是件麻烦事，懒癌+1，可不可以自动登录啊喂？")]),s._v(" "),t("p",[s._v("当然可以！这里的思路和"),t("a",{attrs:{href:"https://help.github.com/articles/connecting-to-github-with-ssh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Github SSH Key"),t("OutboundLink")],1),s._v("类似，只要把本地生成的公钥传过去就可以了。"),t("br"),s._v("\n首先我们要查看本地有没有钥匙 "),t("code",[s._v("ls -al ~/.ssh")]),t("br"),s._v("\n如果有钥匙，如下图，"),t("code",[s._v("id_rsa")]),s._v(" 是私钥，"),t("code",[s._v("id_rsa.pub")]),s._v(" 是公钥："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E6%A3%80%E6%9F%A5%E9%92%A5%E5%8C%99.png",alt:"检查钥匙"}}),t("br"),s._v("\n如果没有钥匙，那我们就生成呗，输入 "),t("code",[s._v("cd ~/.ssh")]),s._v(" 回车进入 "),t("code",[s._v(".ssh")]),s._v(" 文件夹，然后再输入 "),t("code",[s._v('ssh-keygen -t rsa -b 4096 -C "your_email@example.com"')]),s._v(" 疯狂回车，钥匙就生成啦。"),t("br"),s._v("\n接着我们进入服务器控制台，输入 "),t("code",[s._v("ls -a")]),s._v("，检查有没有 "),t("code",[s._v(".ssh")]),s._v(" 文件夹，没有就 "),t("code",[s._v("mkdir .ssh")]),s._v(" 创建，然后 "),t("code",[s._v("cd .ssh")]),s._v(" 进入该文件夹。"),t("br"),s._v("\nOK，现在我们需要在 "),t("code",[s._v(".ssh")]),s._v(" 文件夹中创建一个文件名为 "),t("code",[s._v("authorized_keys")]),s._v(" 的文件。输入 "),t("code",[s._v("touch authorized_keys")]),s._v(" 创建，打开本地的公钥文件(id_rsa.pub)，复制里面的内容，将视线转移回服务器控制台，输入 "),t("code",[s._v("vi authorizaed_keys")]),s._v("，利用 "),t("code",[s._v("vim(编辑器)")]),s._v(" 打开文件，输入 "),t("code",[s._v("i")]),s._v("，开启插入模式，将公钥内容复制进去，然后 "),t("code",[s._v("Esc")]),s._v(" 退出输入模式，再按下 "),t("code",[s._v("shift+:")]),s._v("，输入 "),t("code",[s._v("wq!")]),s._v(" 保存文件，输入 "),t("code",[s._v("chmod 600 authorizaed_keys")]),s._v(" 对文件进行权限升级。"),t("br"),s._v("\n最后输入 "),t("code",[s._v("scp id_rsa.pub 用户名@公网IP:authorized_keys")]),s._v(" 进行上传，"),t("code",[s._v("service ssh restart")]),s._v(" 重启连接后再进入时就可以实现某个用户的免密了！")]),s._v(" "),t("h2",{attrs:{id:"切换用户和角色创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换用户和角色创建"}},[s._v("#")]),s._v(" 切换用户和角色创建")]),s._v(" "),t("p",[s._v("登录完成了，我想看看服务器信息，于是我输入了 "),t("code",[s._v("fdisk -l")]),s._v("，返回了 "),t("code",[s._v("fdisk: cannot open /dev/vda: Permission denied")]),s._v("。很好，我没有权限，这咋整？"),t("br"),s._v("\nUbuntu 这个家伙并不是老大，root 才是最终 BOSS，我们可以利用 root 来进行某些高级权限操作。"),t("br"),s._v("\n转换角色的方法很简单，就是输入 "),t("code",[s._v("su root")]),s._v("，然后输入密码就可以了，默认密码就是 Ubuntu 的密码。"),t("br"),s._v("\n哼哼~，现在我们可以用 "),t("code",[s._v("fdisk -l")]),s._v(" 查看磁盘信息了。")]),s._v(" "),t("p",[s._v("但不久后问题来了，root 懒癌晚期不想动了，想把高级操作授权给其他人，这怎么操作？"),t("br"),s._v("\nDon't mind，首先我们要创建 manager 这个用户，"),t("code",[s._v("adduser manager")]),s._v("；然后使 manager 有使用 sudo 命令的权限，"),t("code",[s._v("gpasswd -a manager sudu")]),s._v("；接着用 vim 打开 sudo 配置文件，"),t("code",[s._v("sudo visudo")]),s._v("；赋予与 root 一样的配置，如下图："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE.png",alt:"用户权限配置"}}),t("br"),s._v("\n退出后我们的 manager 就可以以 "),t("code",[s._v("sudo 命令")]),s._v(" 的方式来执行只有 root 才能执行的操作了。")]),s._v(" "),t("h2",{attrs:{id:"限定端口和登录权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限定端口和登录权限"}},[s._v("#")]),s._v(" 限定端口和登录权限")]),s._v(" "),t("p",[s._v("默认情况下，我们连接的是 22 端口，也就是说我买了服务器，全世界的人都知道我默认连的 22 端口。这可不太对啊，我得把这个端口改掉。"),t("br"),s._v("\n输入 "),t("code",[s._v("sudo vi /etc/ssh/sshd_config")]),s._v(" 打开配置文件，根据 vim 的方式修改端口："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3.png",alt:"修改端口"}}),t("br"),s._v("\n然后设置允许哪些用户可以登录，见下图，添加 "),t("code",[s._v("AllowUsers manager")]),s._v("，允许 manager 可以登录。"),t("br"),s._v("\n这样我们只能以 "),t("code",[s._v("ssh -p 39999 manager@公网IP")]),s._v(" 这种方式才能登录控制台了。")]),s._v(" "),t("p",[s._v("默认情况下，我们服务器的最大 BOSS 是 root，也就是说我买了服务器，全世界的人都知道我 root 可以打爆所有人的狗头。这可不太对啊，我得限制他登录，不然被人窃用了可完蛋了。"),t("br"),s._v("\n还是同样的配置文件，修改地方如下："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E6%9D%83%E9%99%90.png",alt:"修改登录权限"}}),t("br"),s._v(" "),t("code",[s._v("PermitRootLogin no")]),s._v(" 不允许 root 登录"),t("br"),s._v(" "),t("code",[s._v("UseDNS no")]),s._v(" 不让DNS，防止被DNS查找窃取"),t("br"),s._v(" "),t("code",[s._v("PasswordAuthentication no")]),s._v(" 不进行密码登录，因为我们已经在本地配置了无密码登录，也就是说设置后只有我才能登录，就算有密码别人也登录不了。"),t("br"),s._v("\n最后，换电脑时千万注意要进行钥匙的备份，否则就永远登不进服务器了(因为禁用了密码登录= =)。也可以在新电脑上新建钥匙后，传给旧电脑，让旧电脑授权新电脑。")]),s._v(" "),t("h2",{attrs:{id:"增强服务器安全等级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增强服务器安全等级"}},[s._v("#")]),s._v(" 增强服务器安全等级")]),s._v(" "),t("p",[s._v("根据上面的方法，我们实现了基本的服务器安全配置，但这远远不够，我们再加点东西。"),t("br"),s._v("\n这里我们使用了 iptables 防火墙框架(服务器自带)，它的作用是限制登录的方式(http/https/ssh)、拦截异常访问(比如一段时间内超多次连接)、打印拦截Log等。"),t("br"),s._v("\n首先升级一下 Ubuntu 系统 "),t("code",[s._v("sudo apt-get update && sudo apt-get upgrade")]),s._v("，然后清空 iptables 的配置(默认就是没有配置) "),t("code",[s._v("sudo iptables -F")]),t("br"),s._v("\n接着我们创建 iptables 的配置文件 "),t("code",[s._v("sudo vi /etc/iptables.up.rules")]),s._v("，然后输入信息如图："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/iptables%E9%85%8D%E7%BD%AE1.png",alt:"iptables配置1"}}),s._v(" "),t("img",{attrs:{src:"/images/server-build/iptables%E9%85%8D%E7%BD%AE2.png",alt:"iptables配置2"}}),s._v("\n保存文件后，让配置关联到 iptables 上，"),t("code",[s._v("sudo iptables-restore < /etc/iptables.up.rules")]),s._v("，如果没有报错，说明 iptables 配置成功。"),t("br"),s._v("\n然后我们输入 "),t("code",[s._v("sudo ufw status")]),s._v(" 观察防火墙是否开启，如果木有开启，就输入 "),t("code",[s._v("sudo ufw enable")]),s._v(" 打开。"),t("br"),s._v("\nOK，防火墙设置完毕。(PS: 设置配置后最好不要关闭连接，而是新建终端登录，因为如果手残改错了配置，进不去服务器，还可以用已经连接的终端进行配置修改，否则。。。)"),t("br"),s._v("\n不过有个小问题，如果服务器重启了，防火墙就需要手动重启了，我们写个配置文件来自动打开防火墙，懒癌+1，输入 "),t("code",[s._v("sudo vi /etc/network/if-up.d/iptables")]),s._v("，增加 "),t("code",[s._v("#!/bin/sh")]),s._v(" 和 "),t("code",[s._v("iptables-restore /etc/iptables.up.rules")]),s._v(" 字段，最后修改执行权限，让它开机后执行，控制台输入 "),t("code",[s._v("sudo chmod +x /etc/network/if-up.d/iptables")]),s._v(" 后就可以了。")]),s._v(" "),t("p",[s._v("为了根据系统日志执行不同操作，这里用到了fail2ban库，一个防御性动作库。"),t("br"),s._v(" "),t("code",[s._v("sudo apt-get install fail2ban")]),s._v(" 安装后，通过 "),t("code",[s._v("sudo vi /etc/fail2ban/jail.conf")]),s._v(" 打开它的配置文件，修改 destemail 为自己的邮箱(这里我是用QQ邮箱)，然后修改 action 为 "),t("code",[s._v("%(action_mw)s")]),s._v("。"),t("br"),s._v("\n最后我们检查下 fail2ban 运行了木有 "),t("code",[s._v("sudo service fail2ban status")]),s._v("，通过 "),t("code",[s._v("sudo service fail2ban start/stop")]),s._v(" 开关它。")]),s._v(" "),t("p",[s._v("就这样，我们的安全配置就告一段落了，当然了，这些还只是基础配置(认真脸)。")]),s._v(" "),t("h2",{attrs:{id:"环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[s._v("#")]),s._v(" 环境搭建")]),s._v(" "),t("p",[s._v("好的，现在我们开始搭建服务器环境，由于是前端，就用我最熟悉的Node吧，嘻嘻。"),t("br"),s._v("\n首先我们要在服务器系统中安装一些包："),t("code",[s._v("sudo apt-get install vim openssl build-essential libssl-dev wget curl git")]),s._v("。"),t("br"),s._v(" "),t("code",[s._v("vim/git")]),s._v(" 就不用说了；"),t("code",[s._v("wget/curl")]),s._v("可以当作服务端的 npm，用来下载资源；"),t("code",[s._v("openssl build-essential libssl-dev")]),s._v("用来构建HTTPS。　　\n然后下载 "),t("code",[s._v("nvm")]),s._v("："),t("code",[s._v("wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash")]),s._v("。"),t("br"),s._v("\n接着利用 "),t("code",[s._v("nvm")]),s._v(" 来安装 Node "),t("code",[s._v("nvm install Node版本")]),s._v("，应用 Node 到命令行上 "),t("code",[s._v("nvm use Node版本")]),s._v("，设置命令行上 Node 的默认版本 "),t("code",[s._v("nvm alias default Node版本")]),s._v("(可省略此步)。"),t("br"),s._v("\n由于 npm 比较慢，所以可以用淘宝的 cnpm 下载东西，cnpm 用的源是国内的，因此会比较块，让我们安装 cnpm "),t("code",[s._v("npm install -g cnpm --registry=https://registry.npm.taobao.org")]),s._v("。"),t("br"),s._v("\n最后我们增加一下环境监控树，"),t("code",[s._v("echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p")]),s._v("。")]),s._v(" "),t("p",[s._v("OK，环境就这样搭建好了，然后我们测试一下，在服务端写一个app.js(内容就是Node官网的简单示例)，监听端口为8081，保存文件后输入"),t("code",[s._v("node app")]),s._v("，打开浏览器输入公网IP和端口号，激动人心的时刻到了！"),t("br"),s._v("\n。。。"),t("br"),s._v("\n。。。"),t("br"),s._v("\n该网页无法正常运作。。。"),t("br"),s._v("\n嗯？怎么回事？？？"),t("br"),s._v("\n经过一番思索后，原来是 iptables 的配置没有允许 8081 端口啊。"),t("br"),s._v("\n于是我们 "),t("code",[s._v("sudo vi /etc/iptables.up.rules")]),s._v(" 打开文件并添加 8081 接口保存后，"),t("code",[s._v("sudo iptables-restore < /etc/iptables.up.rules")]),s._v(" 关联后就可以该端口的访问了。")]),s._v(" "),t("p",[s._v("OK，网页可以正常显示了，但是问题来了：当我把终端关闭时，就等于是关闭 Node 应用了，有木有办法可以实现离线挂载？"),t("br"),s._v("\n当然有，我们可以使用 "),t("code",[s._v("pm2")]),s._v(" 这个包，它可以自动帮我们运维服务器。"),t("br"),s._v("\n使用 npm 下载 "),t("code",[s._v("pm2")]),s._v(" 后，直接输入 "),t("code",[s._v("pm2 start app.js")]),s._v(" 启动服务，通过 "),t("code",[s._v("pm2 list")]),s._v(" 查看列表、"),t("code",[s._v("pm2 show app")]),s._v(" 查看详细信息、"),t("code",[s._v("pm2 logs")]),s._v(" 查看日志。")]),s._v(" "),t("p",[s._v("OK，即使关掉终端，我们的服务也会继续跑，真棒！但是问题又来了：一般访问网站都是直接输入网站IP或域名，但是我们还需要显示输入端口(8081)。"),t("br"),s._v("\n我们的 manager 用户没有权限去操作 80 端口(0 - 1024 端口只有 root 可以操作，然而我们把 root 关起来了= =)，这可咋整咯？"),t("br"),s._v("\n哼哼~我们可以用Nginx啊！")]),s._v(" "),t("h2",{attrs:{id:"nginx反向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx反向代理"}},[s._v("#")]),s._v(" Nginx反向代理")]),s._v(" "),t("p",[s._v("这家伙的作用如图："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/Nginx%E4%BD%9C%E7%94%A8.png",alt:"Nginx作用"}}),s._v("\n由于购买服务器可能默认带有 apache2，因此首先要把它删掉， 先停止 "),t("code",[s._v("sudo service apache2 stop")]),s._v("，后删除 "),t("code",[s._v("sudo update-rc.d -f apache2 remove")]),s._v("。"),t("br"),s._v("\n更新一下包列表 "),t("code",[s._v("sudo apt-get update")]),s._v("。"),t("br"),s._v("\n安装 Nginx "),t("code",[s._v("sudo apt-get install nginx")]),s._v("。"),t("br"),s._v("\n进入 Nginx 配置文件夹 "),t("code",[s._v("cd /etc/nginx/conf.d")]),s._v("。"),t("br"),s._v("\n创建并编辑自定义配置文件(文件名可以按示例这个格式) "),t("code",[s._v("sudo vi kokota-cn-8081.conf")]),s._v("，编辑内容如下:"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/Nginx%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.png",alt:"Nginx自定义配置"}}),s._v("\n然后我们返回到 nginx 这个目录，打开主配置文件 "),t("code",[s._v("nginx.conf")]),s._v("，检查是否有 "),t("code",[s._v("include /etc/nginx/conf.d/*.conf;")]),s._v("，此项意味着会把所有自定义配置都加载进来。"),t("br"),s._v("\n现在我们检查并进行 Nginx 配置 "),t("code",[s._v("sudo nginx -t")]),s._v("，成功后重启 Nginx "),t("code",[s._v("sudo nginx -s reload")]),s._v("，然后就可以愉快的进行访问啦。"),t("br"),s._v("\nPS：访问网站时，响应头信息会有 "),t("code",[s._v("Server: nginx/1.10.3 (Ubuntu)")]),s._v(" 为了安全考虑可以隐藏它的版本和系统，操作的话我们打开主配置文件 "),t("code",[s._v("nginx.conf")]),s._v(" 然后将 "),t("code",[s._v("# server_tokens off;")]),s._v(" 这个注释取消掉就口以了。")]),s._v(" "),t("h2",{attrs:{id:"域名解析及数据库安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#域名解析及数据库安装"}},[s._v("#")]),s._v(" 域名解析及数据库安装")]),s._v(" "),t("p",[s._v("我们知道，一个域名只能对应一个IP，而一个IP可以对应多个域名。"),t("br"),s._v("\n现在我们有了域名了，就得想办法让用户以域名的方式访问网站。"),t("br"),s._v("\n这时我们就需要用到 "),t("code",[s._v("DNS 解析了")]),s._v("，DNS 解析简单来说就是把域名解析成域名对应的公网IP。"),t("br"),s._v("\n一般来说我们直接使用厂商的 DNS 解析服务就可以了，比如这里我使用的是腾讯云。"),t("br"),s._v("\n解析的设置也很简单：进入腾讯云网站 -> 域名服务 -> 解析。")]),s._v(" "),t("p",[s._v("解析的时候需要选择类型，一般来说我们只要知道 4 种类型即可：")]),s._v(" "),t("ol",[t("li",[s._v("A：域名映射到IP，是常用的类型。")]),s._v(" "),t("li",[s._v("CNAME：域名映射到其他域名，比如七牛云的域名对应多个IP，我们没法让自己的域名对应七牛云的IP，此时我们只要设置CNAME，让自己的域名映射到七牛云的域名，就可以让七牛云去解析IP了。")]),s._v(" "),t("li",[s._v("MX：填写邮件服务器的域名或IP。")]),s._v(" "),t("li",[s._v("TXT：用于企业邮箱的反垃圾设置。")])]),s._v(" "),t("p",[s._v("除了类型，还有权重，即解析时重叠了多个规则，规则的优先级。"),t("br"),s._v("\n这里我们先添加一个 "),t("code",[s._v("www")]),s._v(" 的规则，即访问 "),t("code",[s._v("www.kokota.cn")]),s._v(" 会对应到这个规则上。"),t("br"),s._v("\n当然，我们还可以设置多个子域名，服务器通过不同子域名来分配不同的服务。"),t("br"),s._v("\nDNS 的服务器有很多，比较权威的是 DNSPod，我们在 域名服务 里点击域名后可以看到域名详细信息，这里有一个 DNS 服务器的信息，我们可以看到腾讯云使用的就是 DNSPod。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF.jpg",alt:"域名信息"}})]),s._v(" "),t("p",[s._v("这里介绍一下上面利用CNAME来映射七牛云："),t("br"),s._v("\n首先进入七牛云控制台，点击右侧自定义域名。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%B8%83%E7%89%9B%E4%BA%91%E6%98%A0%E5%B0%84.jpg",alt:"七牛云映射"}}),s._v("\n填写 "),t("code",[s._v("加速域名")]),s._v(" 为腾讯云中添加的二级域名(xx.kokota.cn)，其他选项选默认就好。"),t("br"),s._v("\n然后我们从七牛云中进入这个新加的域名，点击右侧 "),t("code",[s._v("如何配置CNAME")]),s._v("。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%B8%83%E7%89%9B%E4%BA%91%E6%98%A0%E5%B0%842.jpg",alt:"七牛云映射2"}}),s._v("\n复制该位置粉色字体后面的地址，这个地址就是CNAME解析时的地址。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%B8%83%E7%89%9B%E4%BA%91%E6%98%A0%E5%B0%843.jpg",alt:"七牛云映射3"}}),s._v("\n然后将该值添加到对应的二级域名的记录值中即可。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%B8%83%E7%89%9B%E4%BA%91%E6%98%A0%E5%B0%844.jpg",alt:"七牛云映射4"}})]),s._v(" "),t("p",[s._v("好了，通过上面步骤我们把域名对应到了公网IP，但此时我们还无法通过域名进行访问，因为我们的服务器还没处理通过域名访问的情况。不过在解决问题之前，我们先来安装一下数据库，这里使用的是MongoDB。通过 "),t("a",{attrs:{href:"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MongoDB 安装文档"),t("OutboundLink")],1),s._v(" 我们可以很方便的就安装好数据库。下载的时候可能会失败，很有可能是下载源的问题，可以打开 "),t("code",[s._v("/etc/apt/apt.conf")]),s._v(" 把内容注释掉后再重新走一遍文档流程看看。")]),s._v(" "),t("p",[t("strong",[s._v("PS")]),s._v("：通常来说需要两台服务器，一台放应用，一台放数据，这里由于自己是吃土少年，所以就把应用和数据都放在同一个服务器上了。")]),s._v(" "),t("p",[s._v("OK，按文档走到第四步时，我们可能会发现，下载速度好慢！这是因为我们默认的源是 MongoDB 官网的源，你懂的，外网环境。所以如果实在等不了，我们就可以尝试切换 MongoDB 的下载源。通过进入 "),t("code",[s._v("/etc/apt/sources.list.d")]),s._v(" 打开 "),t("code",[s._v("mongodb-org-3.6.list")]),s._v(" 文件，修改源为 "),t("code",[s._v("mirrors.aliyun.com/mongodb/apt/ubuntu")]),s._v("，就可以快速下载啦！")]),s._v(" "),t("p",[s._v("下载完成，根据文档启动 MongoDB，然后我们输入 "),t("code",[s._v("mongo")]),s._v(" 来看看是否启动了数据库。"),t("br"),s._v("\n此时我们会发现我们无法连接到数据库，因为我们的防火墙没有允许本地连接 "),t("code",[s._v("27017")]),s._v(" 这个端口，我们需要修改防火墙配置。"),t("br"),s._v("\n打开 iptables 配置文件， "),t("code",[s._v("sudo vi /etc/iptables.up.rules")]),s._v("，然后在 "),t("code",[s._v("# accept ping ...")]),s._v(" 这条规则后面添加新配置")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# accept mongodb connect")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" INPUT "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp --destination-port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27017")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" state "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--state")]),s._v(" NEW,ESTABLISHED "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" ACCEPT\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" OUTPUT "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp --destination-port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27017")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" state "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--state")]),s._v(" NEW,ESTABLISHED "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" ACCEPT\n")])])]),t("p",[s._v("然后关联配置， "),t("code",[s._v("sudo iptables-restore < /etc/iptables.up.rules")]),s._v("。"),t("br"),s._v("\n接着我们再次输入 "),t("code",[s._v("mongo")]),s._v("，连接成功！")]),s._v(" "),t("p",[s._v("OK，但问题来了，全世界的人都知道 MongoDB 默认连接的就是 27017 端口，我们需要修改这个端口。"),t("br"),s._v("\n打开 MongoDB 配置文件， "),t("code",[s._v("sudo vi /etc/mongod.conf")]),s._v("，修改端口后保存，同理，iptables 的配置也需要修改、关联。"),t("br"),s._v("\n搞定后我们不能用 "),t("code",[s._v("mongo")]),s._v(" 来连接，因为这个指令是简化版的，是连接 27017 端口的，我们需要输入 "),t("code",[s._v("mongo --port 端口号")]),s._v(" 来进行连接。"),t("br"),s._v("\n好了，我们现在完成了数据库的安装和连接了！")]),s._v(" "),t("h2",{attrs:{id:"数据库数据同步和数据库权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库数据同步和数据库权限"}},[s._v("#")]),s._v(" 数据库数据同步和数据库权限")]),s._v(" "),t("p",[s._v("OK，数据库是连上了，但是这个数据库是空的，我们如何将本地数据同步到线上呢？"),t("br"),s._v("\nMongoDB 等数据库是支持数据导入的，基本思想就是：本地数据打包成压缩包 -> 上传到服务器 -> 服务器解压 -> 解压文件导入数据库。"),t("br"),s._v("\n这里介绍两种导入方式，一种是数据库级别的导入，一种是表单级别的导入：")]),s._v(" "),t("ol",[t("li",[s._v("数据库级别：首先我们备份本地的数据库数据，输入 "),t("code",[s._v("mongodump -h 127.0.0.1:27017 -d 数据库名 -o 输出文件夹名")]),s._v("，执行后在输出文件夹中可以看到多个文件。接着我们利用Linux的压缩指令将这些文件进行压缩，输入 "),t("code",[s._v("tar zcvf xx.tar.gz 资源文件夹名")]),s._v(" 后我们得到一个压缩包。然后我们利用 "),t("code",[s._v("scp")]),s._v(" 命令将包上传到服务器，输入 "),t("code",[s._v("scp -p 39999 压缩包路径 manager@xxx.xx.xxx.x:目录")]),s._v(" 将压缩包传输到指定目录。现在目录上就有该压缩包了，利用Linux的命令进行解压缩 "),t("code",[s._v("tar xvf xx.tar.gz")]),s._v(" 后我们就拿到了备份的数据了。最后我们将数据导入到数据库中 "),t("code",[s._v("mongorestore -h 127.0.0.1:19999 -d 数据库名 数据所在的目录")]),s._v("。"),t("a",{attrs:{href:"http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("表单级别：首先执行 "),t("code",[s._v("mongoexport -h 127.0.0.1:27017 -d 数据库名 -c 表名 -q 查询字符串 -o 资源导出路径(./xx.json)")]),s._v("(可以通过 "),t("code",[s._v("subl 文件名")]),s._v(" 打开 sublime 查看该文件内容是否正确)，导出想要的数据到文件。然后将这个文件按上一方法进行上传后，输入 "),t("code",[s._v("mongoimport -h 127.0.0.1:19999 -d 数据库名 -c 表单名 资源文件路径(./xx.json)")]),s._v(" 将数据导入进数据库。")])]),s._v(" "),t("p",[t("strong",[s._v("PS")]),s._v("：这里我们是导入，而不是重写覆盖。"),t("br"),s._v(" "),t("strong",[s._v("PS")]),s._v("：如果要同步本地数据，最好在新建数据库后，在没有角色权限的情况下进行同步，这样可以省去输入用户名、密码等繁琐的步骤。"),t("br"),s._v(" "),t("strong",[s._v("PS")]),s._v("：如果想同步某服务器的数据到另一台服务器，步骤为：服务器A数据打包 -> 下载到本地 -> 和同步本地数据一样的操作...。"),t("br"),s._v(" "),t("strong",[s._v("PS")]),s._v("：如果要删除数据库，只要在系统终端输入 "),t("code",[s._v('mongo -h 127.0.0.1:19999 数据库名 --eval "db.dropDatabase()"')]),s._v(" 即可(当然也可以进入数据库终端再进行删除)。")]),s._v(" "),t("p",[s._v("OK，数据同步完成了，但新的问题也接踵而至：数据库权限问题。我们的数据库中存放着多个应用的数据，如果不进行权限控制，那么各个应用的数据任何人能操作，后果不堪设想。"),t("br"),s._v("\nMongoDB 一开始是没有用户这一说的，我们首先得创建一个管理员，然后这个以这个管理员的身份进行其他角色的创建授权，我们让角色只拥有单个应用的权限。"),t("br"),s._v("\n首先我们得进入数据库终端，输入 "),t("code",[s._v("use admin")]),s._v("，切换到 admin 数据库。"),t("br"),s._v("\n然后通过以下代码格式创建一个管理员:"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98.jpg",alt:"创建管理员"}}),s._v("\n创建成功后我们使用 "),t("code",[s._v("db.auth(用户名，密码)")]),s._v(" 的形式进行授权操作，返回值为 1 说明授权成功，现在我们的身份就是管理员了。")]),s._v(" "),t("p",[s._v("然后我们以这个身份切换到别的数据库来创建角色。"),t("br"),s._v("\n通过以下代码格式创建角色："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2.jpg",alt:"创建角色"}}),s._v("\n注意 "),t("code",[s._v("role")]),s._v(" 这个参数，顾名思义，管理员可以管理所有数据库，角色可以细分为 读写、只读 等。"),t("br"),s._v("\n建议创建一个具有读写角色和一个具有只读的角色。"),t("br"),s._v("\nOK，现在我们就在这个数据库下创建了两个角色了。"),t("br"),s._v("\n现在我们切换回 admin 数据库，再次进行 "),t("code",[s._v("db.auth(用户名，密码)")]),s._v(" 授权管理员后，就可以同理进行其他数据库的角色创建了。")]),s._v(" "),t("p",[s._v("角色创建完毕后，我们得开启验证模式。通过 "),t("code",[s._v("sudo vi /etc/mongod.conf")]),s._v(" 打开配置文件，修改如下："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E6%89%93%E5%BC%80%E9%AA%8C%E8%AF%81%E6%A8%A1%E5%BC%8F.jpg",alt:"打开验证模式"}}),s._v("\n然后重启数据库来更新配置。"),t("br"),s._v("\n现在我们进入数据库，输入 "),t("code",[s._v("show dbs")]),s._v(" 会报错，这说明了我们没有权限，我们需要获得身份进行操作。"),t("br"),s._v("\n比如我们想以管理员身份操作，那就进入 admin 数据库，使用 "),t("code",[s._v("db.auth(用户名，密码)")]),s._v(" 来授权身份为管理员。"),t("br"),s._v("\nOK，现在我们是管理员了！")]),s._v(" "),t("p",[t("strong",[s._v("PS")]),s._v(": "),t("code",[s._v("mongo 127.0.0.1:19999/数据库名 -u 用户 -p 密码")]),s._v(" 可以直接以某用户登录某数据库。")]),s._v(" "),t("h2",{attrs:{id:"数据库备份"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库备份"}},[s._v("#")]),s._v(" 数据库备份")]),s._v(" "),t("p",[s._v("众所周知，我们需要备份数据，否则天知道哪天数据库爆炸了？"),t("br"),s._v("\n备份数据只要使用 "),t("code",[s._v("mongodump ...")]),s._v(" 这个方法就可以了，不过每次都手动备份、压缩、存储，是非常麻烦的。"),t("br"),s._v("\n我们可以编写一个脚本来执行备份操作，并且也可以利用自动执行脚本工具每个一段时间自动执行备份。")]),s._v(" "),t("p",[s._v("OK，现在我们来开始编写备份脚本。"),t("br"),s._v("\n我个人是在根目录下创建了个 tasks 文件夹，创建脚本文件 "),t("code",[s._v("vi ./tasks/talk.backup.sh")]),s._v("。"),t("br"),s._v("\n内容如下，基本思想就是：创建临时文件夹 -> 导出数据到临时文件夹 -> 将临时文件夹进行压缩打包 -> 删除临时文件夹"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC.jpg",alt:"自动备份脚本"}}),s._v("\n写完脚本后我们可以输入 "),t("code",[s._v("sh ./tasks/talk.backup.sh")]),s._v(" 来执行脚本，执行后检查是否有数据压缩包。")]),s._v(" "),t("p",[s._v("OK，脚本写好了，现在我们要让它每过一段时间执行一次。"),t("br"),s._v("\n通过 "),t("code",[s._v("crontab -e")]),s._v(" 打开系统任务配置文件。"),t("br"),s._v("\n添加时间任务如下："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E6%97%B6%E9%97%B4%E4%BB%BB%E5%8A%A1.jpg",alt:"时间任务"}}),s._v("\n然后 "),t("code",[s._v("ctrl + x")]),s._v(" "),t("code",[s._v("shift + Y")]),s._v(" "),t("code",[s._v("enter")]),s._v(" 进行保存。")]),s._v(" "),t("p",[s._v("OK，我们完成了自动执行备份脚本的功能了，但我们备份时最好本地有一份，别的服务器也有一份。"),t("br"),s._v("\n这里我们可以用文件上传的方式把备份上传到七牛云。"),t("br"),s._v("\n首先安装七牛云的 npm 包 "),t("code",[s._v("npm i qiniu")]),s._v("。"),t("br"),s._v("\n然后打开七牛云网站的 "),t("code",[s._v("Node SDK")]),s._v("，复制 "),t("code",[s._v("文件上传")]),s._v(" 的代码，修改对应参数后，保存为文件(比如 "),t("code",[s._v("upload.js")]),s._v(")。"),t("br"),s._v("\n然后添加执行该上传操作的命令到自动备份脚本，格式类似："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.jpg",alt:"七牛云上传文件"}}),s._v("\n这样我们就可以将压缩包上传到七牛云的存储空间了。")]),s._v(" "),t("p",[t("strong",[s._v("PS")]),s._v("：上传到七牛云时，七牛云需要创建对应的存储空间。"),t("br"),s._v(" "),t("strong",[s._v("PS")]),s._v("：除了安装 MongoDB，也可以安装 Mysql。"),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/%E5%AE%89%E8%A3%85mysql.jpg",alt:"安装mysql"}})]),s._v(" "),t("p",[s._v("好了，经过这么多步骤，服务器配置宣告结束！终于进入项目部署阶段了！")]),s._v(" "),t("h2",{attrs:{id:"项目部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目部署"}},[s._v("#")]),s._v(" 项目部署")]),s._v(" "),t("p",[s._v("之前我们已经提到过可以用 pm2 进行Node项目的部署，这里不使用 "),t("code",[s._v("pm2 start app.js")]),s._v(" 这种方法来进行部署，输入 "),t("code",[s._v("pm2 delete app.js")]),s._v(" 删除这个测试用例。"),t("br"),s._v("\n我们使用配置文件来 "),t("strong",[s._v("远程部署")]),s._v(" 项目，即本地通知服务器去拉取项目并部署。")]),s._v(" "),t("p",[s._v("首先我们在要在本地安装 pm2，然后在要部署的项目的根目录下创建 "),t("code",[s._v("ecosystem.json")]),s._v(" 文件，然后输入如下配置：")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 应用信息")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"apps"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MusicServer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 项目名称")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"script"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行入口")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"watch"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否监听")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"env"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 默认环境")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"NODE_ENV"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"development"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 环境变量")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"env_production"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自定义环境，输入 --env production  来使用")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"NODE_ENV"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"production"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 环境变量")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 部署信息")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"deploy"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"production"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 部署方法名")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"user"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxxxx"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 服务器上的管理员名字")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"host"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx.xx.xx.x"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 公网IP")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"port"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxxxx"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 端口")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ref"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"origin/master"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 远程代码分支")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"repo"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git@gitlab.com:xxxx.git"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 远程代码地址")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"path"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/www/website/music-server"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 部署的路径")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"ssh_options"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"StrictHostKeyChecking=no"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不检查host key")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"env"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 部署时的环境，默认会被应用的 env_production 覆盖，原因见文档的 post-deploy 字段")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"NODE_ENV"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"production"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 环境变量")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("a",{attrs:{href:"http://pm2.keymetrics.io/docs/usage/deployment/",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考"),t("OutboundLink")],1),t("br"),s._v("\n由上可知我们的部署路径是在根目录下的 www/website 文件夹中，我们在服务器终端中 "),t("code",[s._v("cd /")]),s._v(" 进入根目录，然后创建文件夹。"),t("br"),s._v("\n接着保存配置文件并输入 "),t("code",[s._v("pm2 deploy ecosystem.json production(部署方法名) setup(建立远程连接)")]),s._v(" 来启动部署。")]),s._v(" "),t("p",[s._v("部署时我们发现有 "),t("code",[s._v("mkdir: cannot create directory ‘/www/website/music-server’: Permission denied")]),s._v(" 的错误。"),t("br"),s._v("\n这是因为我们的角色没有操作权限(root有，但已被封印)，此时我们需要进行降权操作。")]),s._v(" "),t("p",[s._v("这里我们降权 website 这个文件夹，输入 "),t("code",[s._v("sudo chmod 777 -R website")]),s._v(" 来使该文件夹下我们的角色可以进行增删操作。"),t("br"),s._v("\nOK，再次输入 "),t("code",[s._v("pm2...")]),s._v(" 这个命令，部署完成。")]),s._v(" "),t("p",[s._v("部署完成后在服务器端我们可以发现 website 下多了我们的项目文件夹，里面包含了三个子文件夹，分别代表了："),t("br"),s._v(" "),t("strong",[s._v("current")]),s._v("：当前服务运行的文件夹"),t("br"),s._v(" "),t("strong",[s._v("shared")]),s._v("：日志等其他共享文件"),t("br"),s._v(" "),t("strong",[s._v("source")]),s._v("：项目源代码")]),s._v(" "),t("p",[s._v("现在我们来发布项目，输入 "),t("code",[s._v("pm2 deploy ecosystem.json production(部署方法名)")]),s._v(" 可发布项目。"),t("br"),s._v("\n然而又报错了= =  "),t("code",[s._v("pm2: command not found")]),s._v("，原因是 pm2 没有开启 ssh 远程交互模式，所以没法调用服务器那头的 pm2，我们来更改一下配置吧。"),t("br"),s._v("\n回到角色根目录 "),t("code",[s._v("cd")]),s._v(" ， "),t("code",[s._v("vi .bashrc")]),s._v(" 打开文件，把 "),t("code",[s._v("If not running...")]),s._v(" 下的四行代码注释掉并保存。"),t("br"),s._v("\n重新加载它 "),t("code",[s._v("source .bashrc")]),s._v("。"),t("br"),s._v("\n然后重新发布。"),t("br"),s._v("\n发现又报错了，原来是本地的 "),t("strong",[s._v("ecosystem.json")]),s._v(" 得提交到远程服务器啊，让我们提交后再试一次。")]),s._v(" "),t("p",[s._v("我们这次就发布成功了，让我们在终端输入 "),t("code",[s._v("pm2 list")]),s._v(" 查看状态。"),t("br"),s._v("\n此时有可能会出现 status errored，可以输入 "),t("code",[s._v("pm2 logs")]),s._v(" 查看日志并进行项目调整。")]),s._v(" "),t("p",[s._v("OK，项目发布成功后我们还得调整 nginx 和 iptables 的配置。"),t("br"),s._v("\n因为这次发布的项目要关联域名，并且项目是监听 3000 端口的，我们需要允许这个端口开放。")]),s._v(" "),t("p",[s._v("nginx 修改的地方就是将 "),t("code",[s._v("server_name")]),s._v(" 的值改为域名。"),t("br"),s._v("\niptables 修改的地方就是添加如下代码，允许 3000 端口的输入输出：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# accept 3000 port entry and output")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" INPUT "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp --destination-port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" state "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--state")]),s._v(" NEW,ESTABLISHED "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" ACCEPT\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v(" OUTPUT "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" tcp --destination-port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" state "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--state")]),s._v(" ESTABLISHED "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-j")]),s._v(" ACCEPT\n")])])]),t("p",[s._v("当进行多个项目发布时，同理。"),t("br"),s._v("\n这样，我们的项目就能用域名访问啦！")]),s._v(" "),t("p",[s._v("当然，我们在部署时是分 开发环境(development) 和 生产环境(production) 的，MongoDB数据库的连接需要区分环境，"),t("br"),s._v("\n开发时连接本地数据库，生产时连接服务器数据库，代码类似："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/MongoDB%E8%BF%9E%E6%8E%A5.jpg",alt:"MongoDB连接"}})]),s._v(" "),t("p",[s._v("完结撒花！")]),s._v(" "),t("h2",{attrs:{id:"番外1-ssl证书的获取与应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#番外1-ssl证书的获取与应用"}},[s._v("#")]),s._v(" 番外1：SSL证书的获取与应用")]),s._v(" "),t("p",[s._v("由于小程序开发的域名只支持 https，因此 SSL 证书的申请就显得理所当然了。")]),s._v(" "),t("blockquote",[t("p",[s._v("PS：在小程序篇里我们使用自己的二级域名作为小程序的请求域，这个请求域代理了豆瓣的API。")])]),s._v(" "),t("p",[s._v("证书一般分为三类：")]),s._v(" "),t("ol",[t("li",[s._v("DV：安全性一般，有免费的，有便宜的，用于个人博客、展示页面等。")]),s._v(" "),t("li",[s._v("OV：安全性强，价格较高，用于电商网站、私密社交等。")]),s._v(" "),t("li",[s._v("EV：安全性最高，价格非常高，用于金融支付、网上银行等。")])]),s._v(" "),t("p",[s._v("这里我们使用免费的 DV 证书即可，"),t("a",{attrs:{href:"https://console.cloud.tencent.com/ssl",target:"_blank",rel:"noopener noreferrer"}},[s._v("申请地址"),t("OutboundLink")],1),s._v("。"),t("br"),s._v("\n申请时：私钥密码不填、选择手动DNS验证。"),t("br"),s._v("\n申请成功后，进入证书详情，按"),t("a",{attrs:{href:"https://cloud.tencent.com/document/product/400/4142#1.-.E6.89.8B.E5.8A.A8dns.E9.AA.8C.E8.AF.81",target:"_blank",rel:"noopener noreferrer"}},[s._v("要求"),t("OutboundLink")],1),s._v("添加解析记录。"),t("br"),s._v("\n随后回到详情页点击检测。"),t("br"),s._v("\n检测成功后我们就可以下载证书了。")]),s._v(" "),t("p",[s._v("证书包下载后解压，打开终端，输入 "),t("code",[s._v("scp -P 39999 ./1_xxx_bundle.crt manager@xxx:/home/manager/")]),s._v(" 把 .crt 和 .key 文件上传到根目录。"),t("br"),s._v("\n上传完成后，我们建立一个 ssl 文件夹，把这俩文件放进去 "),t("code",[s._v("mkdir ssl")]),s._v(" "),t("code",[s._v("mv 1_* ./ssl/")]),s._v(" "),t("code",[s._v("mv 2_* ./ssl/")]),s._v("。"),t("br"),s._v("\n然后把 ssl 文件夹放到 /www/ 下面 "),t("code",[s._v("mv ssl /www/")]),s._v("。")]),s._v(" "),t("p",[s._v("接着我们进入证书详情页，点击"),t("a",{attrs:{href:"https://www.qcloud.com/doc/product/400/%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("指引文档"),t("OutboundLink")],1),s._v("，把 Nginx 下的 server 配置复制，location 代码不复制。"),t("br"),s._v("\n然后我们进入 nginx 的配置文件夹，新建配置文件(xx-xxx-xx.conf)，将代码复制进去，根据情况进行修改。"),t("br"),s._v("\n复制"),t("a",{attrs:{href:"https://www.zhihu.com/question/265806694",target:"_blank",rel:"noopener noreferrer"}},[s._v("豆瓣Nginx转发"),t("OutboundLink")],1),s._v("的 location 代码到配置文件中，保存。"),t("br"),s._v("\n最终配置如下：")]),s._v(" "),t("div",{staticClass:"language-nginx extra-class"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("listen")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server_name")]),s._v(" xxxx.xxxxxx.cn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" https://xxxx.xxxxxx.cn"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$request_uri")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果是以 http://... 的形式访问，就重定向到 https://...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("listen")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server_name")]),s._v(" xxxx.xxxxxx.cn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#填写绑定证书的域名")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("on")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_certificate")]),s._v(" /www/ssl/1_xxxx.xxxxxx.cn_bundle.crt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_certificate_key")]),s._v(" /www/ssl/2_xxxx.xxxxxx.cn.key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_session_timeout")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5m")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_protocols")]),s._v(" TLSv1 TLSv1.1 TLSv1.2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#按照这个协议配置")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_ciphers")]),s._v(" ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#按照这个套件配置")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ssl_prefer_server_ciphers")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("on")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("location")]),s._v(" /v2/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_store")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("off")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_redirect")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("off")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" X-Forwarded-For "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$proxy_add_x_forwarded_for")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" X-Real-IP "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$remote_addr")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" Referer "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'no-referrer-when-downgrade'")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" User-Agent "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_connect_timeout")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_read_timeout")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_send_timeout")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token directive"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_pass")]),s._v(" https://api.douban.com/v2/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("然后 "),t("code",[s._v("sudo nginx -t")]),s._v(" "),t("code",[s._v("sudo nginx -s reload")]),s._v("。"),t("br"),s._v("\n最后，添加对应的二级域名的解析。"),t("br"),s._v("\n完成！")]),s._v(" "),t("h2",{attrs:{id:"番外2-连接远程数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#番外2-连接远程数据库"}},[s._v("#")]),s._v(" 番外2：连接远程数据库")]),s._v(" "),t("p",[s._v("数据库可视化工具(Robomongo 等)如何连接远程数据库？尤其是使用了 Nginx 的情况下？"),t("br"),s._v("\n如果单单是前者，那么 so easy，工具要输入 IP 和 port，必要时输入 用户名 和 密码 就可以了。"),t("br"),s._v("\n但如果加上后者呢？"),t("br"),s._v("\n当我想当然的弄了个二级域名，用它指向远端本地数据库，以为连上这个域名就能转接到数据库时...哦呼，似乎不行呢，提示了个 "),t("code",[s._v("recv(): message len 1347703880 is invalid. Min 16 Max: 48000000")]),s._v(" 的错误了呢，这是咋回事呢？"),t("br"),s._v("\n原因是数据库连接需要使用 "),t("strong",[s._v("流数据")]),s._v(" 的方式，也就是说，数据库连接不能直接用 nginx 启动一个 server 来完成，因为这个 server 使用的是 http 的方式，我们需要用 stream 的方式来建立 server。"),t("br"),s._v("\n详细解决方案见："),t("a",{attrs:{href:"https://stackoverflow.com/questions/31853755/how-to-setup-mongodb-behind-nginx-reverse-proxy",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("该方案有几个要点：")]),s._v(" "),t("ol",[t("li",[s._v("利用 stream 建立 server")]),s._v(" "),t("li",[s._v("stream 中的 server 不支持 server_name")]),s._v(" "),t("li",[s._v("stream 模块与 http 模块同级")]),s._v(" "),t("li",[s._v("不要将 stream 放入 /etc/nginx/conf.d/xx.conf 中，而应该将其放入 /etc/nginx/nginx.conf 中，因为 conf.d 中的所有配置都是以 http 的方式启动的，且放在该目录下的配置文件，如果包含 stream，那么意味着 http { stream {...} ... }，违反了同级的规定，会报错(可以打开配置文件自己瞅瞅)")]),s._v(" "),t("li",[s._v("iptables 的端口权限需要设置")])]),s._v(" "),t("p",[s._v("跟着党走，配置后的信息如下："),t("br"),s._v(" "),t("img",{attrs:{src:"/images/server-build/stream%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE.jpg",alt:"stream模块配置"}}),t("br"),s._v("\n完成！")]),s._v(" "),t("h2",{attrs:{id:"番外3-连接远程服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#番外3-连接远程服务器"}},[s._v("#")]),s._v(" 番外3：连接远程服务器")]),s._v(" "),t("p",[s._v("上面是连接数据库，现在是连接服务器。"),t("br"),s._v("\n我们可以使用 FileLizza 来连接，它可以简化一些操作(比如：新建、删除、移动等)"),t("br"),s._v("\n默认情况下它使用的是 ftp 连接，但由于我们使用的是 ssh 密钥的方式，属于 sftp 连接，所以需要更改一下软件设置："),t("br"),s._v("\n文件 -> 站点管理器 -> 新建 -> sftp模式 -> 传密钥 -> 连接 -> 搞定")]),s._v(" "),t("p",[s._v("另外，这里提一下 “杀线程” 方法，顾名思义，停止某个线程使用，释放端口：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i:4000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查某个端口的使用情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-9")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 杀掉线程")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);